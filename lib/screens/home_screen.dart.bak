import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/connectivity_service.dart';
import '../services/location_service.dart';
import '../services/weather_service.dart';
import '../widgets/location_indicator.dart';
import '../services/memory_storage_service.dart';
import '../utils/risk_calculator.dart';
import '../models/user_profile.dart';
import '../widgets/consent_dialog.dart';
import '../widgets/offline_status_indicators.dart';
import '../widgets/loading_state.dart';
import '../widgets/skeleton_loading.dart';
import '../utils/app_styles.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String status = 'Idle';
  double? tempC;
  double? humidity;
  int? riskScore;
  UserProfile? profile;
  LocationAddress? locationData;
  bool _isLoading = true;

  late final WeatherService ws;
  final LocationService _locationService = LocationService();

  @override
  void initState() {
    super.initState();
    _initWeatherService();
  }

  Future<void> _initWeatherService() async {
    final prefs = await SharedPreferences.getInstance();
    ws = WeatherService(prefs: prefs);
    _init();
  }

  Future<void> _init() async {
    setState(() => status = 'Getting location');
    try {
      final location = await _locationService.getCurrentLocation();
      if (location == null) {
        setState(() => status = 'Location permission denied');
        return;
      }
      setState(() => locationData = location);

      setState(() => status = 'Fetching weather');
      final weather = await ws.getCurrentWeather(
        location.position.latitude,
        location.position.longitude
      );
      if (weather == null) {
        setState(() => status = 'Weather fetch failed');
        return;
      }
      tempC = weather.temperature;
      humidity = weather.humidity;

      final hi = RiskCalculator.heatIndexC(tempC ?? 0, humidity ?? 0);
      final memoryStorage = MemoryStorageService();
      profile = memoryStorage.sessionData.userProfile;

      setState(() {
        if (profile != null && memoryStorage.hasUserConsent) {
          riskScore = RiskCalculator.calculateFinalRisk(hi, profile!);
        } else {
          riskScore = RiskCalculator.heatRiskScore(hi);
        }
        status = 'Ready';
      });
    } catch (e) {
      setState(() => status = 'Error: ${e.toString()}');
    }
  }

  Future<void> _openConsent() async {
    final res = await showDialog<UserProfile?>(context: context, builder: (_) => ConsentDialog(initial: profile));
    if (res != null) {
      final memoryStorage = MemoryStorageService();
      memoryStorage.sessionData.setUserProfile(res);
      memoryStorage.updateUserConsent(res.consented);
      setState(() => profile = res);
      await _init();
    }
  }

  Widget _buildWeatherSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Current Weather',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            if (locationData != null) 
              LocationIndicator(locationData: locationData!),
            if (tempC != null && humidity != null) ...[
              const SizedBox(height: 12),
              Text(
                'Temperature: ${tempC!.toStringAsFixed(1)} °C',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 4),
              Text(
                'Humidity: ${humidity!.toStringAsFixed(0)} %',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildProfileSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Profile',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Text('Age: ${profile!.age}'),
            Text('Gender: ${profile!.gender.name}'),
            Text('Activity Level: ${profile!.activityLevel.name}'),
            if (profile!.hasCardio || profile!.hasRespiratory || 
                profile!.hasDiabetes || profile!.hasHypertension) ...[
              const SizedBox(height: 8),
              const Text('Medical Conditions:'),
              if (profile!.hasCardio)
                const Text('• Cardiovascular condition'),
              if (profile!.hasRespiratory)
                const Text('• Respiratory condition'),
              if (profile!.hasDiabetes)
                const Text('• Diabetes'),
              if (profile!.hasHypertension)
                const Text('• Hypertension'),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildRiskSection() {
    return OfflineIndicator(
      child: Card(
        color: _colorForRisk(riskScore!),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Heat Risk: $riskScore / 100',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 6),
              Text(RiskCalculator.getRiskDescription(riskScore!)),
              const SizedBox(height: 12),
              const Text(
                'Recommendations:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 4),
              ...RiskCalculator.getRecommendations(
                riskScore!,
                profile ?? UserProfile(
                  age: 30,
                  gender: Gender.other,
                  hasCardio: false,
                  hasRespiratory: false,
                  hasDiabetes: false,
                  hasHypertension: false,
                  activityLevel: ActivityLevel.moderate,
                  consented: false,
                ),
              ).map((rec) => Padding(
                padding: const EdgeInsets.only(top: 4),
                child: Text('• $rec'),
              )),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildWeatherSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Current Weather',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            if (locationData != null) 
              LocationIndicator(locationData: locationData!),
            if (tempC != null && humidity != null) ...[
              const SizedBox(height: 12),
              Text(
                'Temperature: ${tempC!.toStringAsFixed(1)} °C',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 4),
              Text(
                'Humidity: ${humidity!.toStringAsFixed(0)} %',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildProfileSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Profile',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Text('Age: ${profile!.age}'),
            Text('Gender: ${profile!.gender.name}'),
            Text('Activity Level: ${profile!.activityLevel.name}'),
            if (profile!.hasCardio || profile!.hasRespiratory || 
                profile!.hasDiabetes || profile!.hasHypertension) ...[
              const SizedBox(height: 8),
              const Text('Medical Conditions:'),
              if (profile!.hasCardio)
                const Text('• Cardiovascular condition'),
              if (profile!.hasRespiratory)
                const Text('• Respiratory condition'),
              if (profile!.hasDiabetes)
                const Text('• Diabetes'),
              if (profile!.hasHypertension)
                const Text('• Hypertension'),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildRiskSection() {
    return OfflineIndicator(
      child: Card(
        color: _colorForRisk(riskScore!),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Heat Risk: $riskScore / 100',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 6),
              Text(RiskCalculator.getRiskDescription(riskScore!)),
              const SizedBox(height: 12),
              const Text(
                'Recommendations:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 4),
              ...RiskCalculator.getRecommendations(
                riskScore!,
                profile ?? UserProfile(
                  age: 30,
                  gender: Gender.other,
                  hasCardio: false,
                  hasRespiratory: false,
                  hasDiabetes: false,
                  hasHypertension: false,
                  activityLevel: ActivityLevel.moderate,
                  consented: false,
                ),
              ).map((rec) => Padding(
                padding: const EdgeInsets.only(top: 4),
                child: Text('• $rec'),
              )),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Beat The Heat'),
        actions: [
          IconButton(
            onPressed: _openConsent,
            icon: const Icon(Icons.person),
          ),
        ],
      ),
      body: Consumer<ConnectivityService>(
        builder: (context, connectivityService, child) {
          if (status == 'Getting location') {
            return const LoadingState(
              message: 'Getting your location...',
            );
          }

          if (status == 'Fetching weather') {
            return ListView(
              padding: const EdgeInsets.all(16.0),
              children: const [
                WeatherSkeletonLoading(),
                SizedBox(height: 16),
                WeatherSkeletonLoading(),
              ],
            );
          }

          if (status.startsWith('Error')) {
            return LoadingState(
              message: status,
              isError: true,
              onRetry: _init,
            );
          }

          return RefreshIndicator(
            onRefresh: _init,
            child: ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                if (!connectivityService.isOffline)
                  StreamBuilder<bool>(
                    stream: connectivityService.isSyncing,
                    builder: (context, snapshot) {
                      if (snapshot.data == true) {
                        return Padding(
                          padding: const EdgeInsets.only(bottom: 16.0),
                          child: SyncStatusIndicator(
                            isSyncing: Stream.value(true),
                          ),
                        );
                      }
                      return const SizedBox.shrink();
                    },
                  ),

                _buildWeatherSection(),
                const SizedBox(height: 16),

                if (profile != null) ...[
                  _buildProfileSection(),
                  const SizedBox(height: 16),
                ],

                if (riskScore != null)
                  _buildRiskSection()
                else
                  const Card(
                    child: Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Text('No risk assessment available yet'),
                    ),
                  ),

                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: connectivityService.isOffline ? null : _init,
                  icon: const Icon(Icons.refresh),
                  label: Text(connectivityService.isOffline ? 'Offline' : 'Refresh Data'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

                _buildWeatherSection(),
                const SizedBox(height: 16),

                if (profile != null) ...[
                  _buildProfileSection(),
                  const SizedBox(height: 16),
                ],

                if (riskScore != null)
                  _buildRiskSection()
                else
                  const Card(
                    child: Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Text('No risk assessment available yet'),
                    ),
                  ),

                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: connectivity.isOffline ? null : _init,
                  icon: const Icon(Icons.refresh),
                  label: Text(connectivity.isOffline ? 'Offline' : 'Refresh Data'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }          return RefreshIndicator(
            onRefresh: _init,
            child: ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                if (!connectivity.isOffline)
                  StreamBuilder<bool>(
                    stream: connectivity.isSyncing,
                    builder: (context, snapshot) {
                      if (snapshot.data == true) {
                        return const Padding(
                          padding: EdgeInsets.only(bottom: 16.0),
                          child: SyncStatusIndicator(
                            isSyncing: Stream.value(true),
                          ),
                        );
                      }
                      return const SizedBox.shrink();
                    },
                  ),

                if (locationData != null) ...[
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Current Weather',
                            style: Theme.of(context).textTheme.titleMedium,
                          ),
                          const SizedBox(height: 16),
                          LocationIndicator(locationData: locationData!),
                          if (tempC != null && humidity != null) ...[
                            const SizedBox(height: 12),
                            Text(
                              'Temperature: ${tempC!.toStringAsFixed(1)} °C',
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                            const SizedBox(height: 4),
                            Text(
                              'Humidity: ${humidity!.toStringAsFixed(0)} %',
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                          ],
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                ],

                if (profile != null) ...[
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Profile',
                            style: Theme.of(context).textTheme.titleMedium,
                          ),
                          const SizedBox(height: 8),
                          Text('Age: ${profile!.age}'),
                          Text('Gender: ${profile!.gender.name}'),
                          Text('Activity Level: ${profile!.activityLevel.name}'),
                          if (profile!.hasCardio || profile!.hasRespiratory || 
                              profile!.hasDiabetes || profile!.hasHypertension) ...[
                            const SizedBox(height: 8),
                            const Text('Medical Conditions:'),
                            if (profile!.hasCardio)
                              const Text('• Cardiovascular condition'),
                            if (profile!.hasRespiratory)
                              const Text('• Respiratory condition'),
                            if (profile!.hasDiabetes)
                              const Text('• Diabetes'),
                            if (profile!.hasHypertension)
                              const Text('• Hypertension'),
                          ],
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                ],

                if (riskScore != null) ...[
                  OfflineIndicator(
                    child: Card(
                      color: _colorForRisk(riskScore!),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Heat Risk: $riskScore / 100',
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 6),
                            Text(RiskCalculator.getRiskDescription(riskScore!)),
                            const SizedBox(height: 12),
                            const Text(
                              'Recommendations:',
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            const SizedBox(height: 4),
                            ...RiskCalculator.getRecommendations(
                              riskScore!,
                              profile ?? UserProfile(
                                age: 30,
                                gender: Gender.other,
                                hasCardio: false,
                                hasRespiratory: false,
                                hasDiabetes: false,
                                hasHypertension: false,
                                activityLevel: ActivityLevel.moderate,
                                consented: false,
                              ),
                            ).map((rec) => Padding(
                              padding: const EdgeInsets.only(top: 4),
                              child: Text('• $rec'),
                            )),
                          ],
                        ),
                      ),
                    ),
                  ),
                ] else
                  const Card(
                    child: Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Text('No risk assessment available yet'),
                    ),
                  ),

                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: connectivity.isOffline ? null : _init,
                  icon: const Icon(Icons.refresh),
                  label: Text(connectivity.isOffline ? 'Offline' : 'Refresh Data'),
                ),
              ],
            ),
          );
          ),
        ),
      ),
    );
  }

  Color _colorForRisk(int r) {
    if (r < 20) return Colors.green[300]!;
    if (r < 40) return Colors.yellow[300]!;
    if (r < 70) return Colors.orange[300]!;
    return Colors.red[300]!;
  }


}
