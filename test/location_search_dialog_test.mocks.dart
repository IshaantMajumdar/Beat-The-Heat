// Mocks generated by Mockito 5.4.6 from annotations
// in beat_the_heat/test/location_search_dialog_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:beat_the_heat/services/location_service.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i2.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i2.LocationAddress?> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i3.Future<_i2.LocationAddress?>.value(),
          )
          as _i3.Future<_i2.LocationAddress?>);

  @override
  _i3.Stream<_i4.Position> getLocationStream() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationStream, []),
            returnValue: _i3.Stream<_i4.Position>.empty(),
          )
          as _i3.Stream<_i4.Position>);

  @override
  _i3.Future<_i2.LocationAddress?> getLocationFromSearch(String? searchQuery) =>
      (super.noSuchMethod(
            Invocation.method(#getLocationFromSearch, [searchQuery]),
            returnValue: _i3.Future<_i2.LocationAddress?>.value(),
          )
          as _i3.Future<_i2.LocationAddress?>);
}
